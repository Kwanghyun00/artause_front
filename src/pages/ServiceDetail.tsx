import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useInView } from 'react-intersection-observer';
import {
  ArrowLeft,
  Sparkles,
  Building2,
  BarChart,
  Users,
  Calendar,
  ArrowRight,
  CheckCircle2,
  MousePointer,
  X
} from 'lucide-react';

const services = {
  spotlight: {
    title: 'Ïä§ÌèøÎùºÏûá',
    description: 'AI Í∏∞Î∞ò Í≥µÏó∞ ÎßàÏºÄÌåÖ ÏÜîÎ£®ÏÖò',
    icon: Sparkles,
    color: '#FF7F00',
    features: [
      {
        icon: BarChart,
        title: 'Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÎßàÏºÄÌåÖ',
        description: 'Í¥ÄÍ∞ù Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑùÏùÑ ÌÜµÌïú Ìö®Í≥ºÏ†ÅÏù∏ ÌÉÄÍ≤üÌåÖ',
        details: [
          'ÎπÖÎç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Í¥ÄÍ∞ù ÏÑ±Ìñ• Î∂ÑÏÑù',
          'Ïã§ÏãúÍ∞Ñ ÎßàÏºÄÌåÖ ÏÑ±Í≥º Ìä∏ÎûòÌÇπ',
          'ÎßûÏ∂§Ìòï ÏΩòÌÖêÏ∏† Ï∂îÏ≤ú ÏãúÏä§ÌÖú',
          'A/B ÌÖåÏä§Ìä∏ ÏßÄÏõê'
        ]
      },
      {
        icon: Users,
        title: 'Í¥ÄÍ∞ù ÏÑ∏Í∑∏Î®ºÌÖåÏù¥ÏÖò',
        description: 'Í¥ÄÏã¨ÏÇ¨ÏôÄ ÌñâÎèô Ìå®ÌÑ¥ Í∏∞Î∞ò Í¥ÄÍ∞ù Í∑∏Î£πÌôî',
        details: [
          'Ïù∏Íµ¨ÌÜµÍ≥ÑÌïôÏ†Å Î∂ÑÏÑù',
          'Î¨∏ÌôîÏÉùÌôú Ìå®ÌÑ¥ Î∂ÑÏÑù',
          'Ìã∞Ïºì Íµ¨Îß§ Ïù¥Î†• Î∂ÑÏÑù',
          'ÎßûÏ∂§Ìòï ÌîÑÎ°úÎ™®ÏÖò ÏÑ§Í≥Ñ'
        ]
      },
      {
        icon: Calendar,
        title: 'ÏµúÏ†Å ÏãúÏ†ê Î∂ÑÏÑù',
        description: 'Ìã∞Ïºì Ïò§Ìîà Î∞è ÌîÑÎ°úÎ™®ÏÖò ÏµúÏ†Å ÏãúÏ†ê Ï∂îÏ≤ú',
        details: [
          'ÏãúÏ¶åÎ≥Ñ Ìã∞Ïºì ÌåêÎß§ Ìä∏Î†åÎìú Î∂ÑÏÑù',
          'Í≤ΩÏüÅ Í≥µÏó∞ ÏùºÏ†ï Î∂ÑÏÑù',
          'Í¥ÄÍ∞ù ÏÑ†Ìò∏ ÏãúÍ∞ÑÎåÄ Î∂ÑÏÑù',
          'ÌîÑÎ°úÎ™®ÏÖò Ìö®Í≥º ÏòàÏ∏°'
        ]
      }
    ],
    steps: [
      {
        title: 'Í≥µÏó∞ Ï†ïÎ≥¥ Îì±Î°ù',
        description: 'Í≥µÏó∞Ïùò Í∏∞Î≥∏ Ï†ïÎ≥¥ÏôÄ ÌäπÏÑ±ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
        icon: 'üìù'
      },
      {
        title: 'ÌÉÄÍ≤ü Í¥ÄÍ∞ù Î∂ÑÏÑù',
        description: 'AIÍ∞Ä ÏµúÏ†ÅÏùò ÌÉÄÍ≤ü Í¥ÄÍ∞ùÏùÑ Î∂ÑÏÑùÌï©ÎãàÎã§',
        icon: 'üéØ'
      },
      {
        title: 'ÎßàÏºÄÌåÖ Ï†ÑÎûµ ÏàòÎ¶Ω',
        description: 'Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏùò ÎßàÏºÄÌåÖ Ï†ÑÎûµÏùÑ Ï†úÏïàÎ∞õÏäµÎãàÎã§',
        icon: 'üìä'
      },
      {
        title: 'Ï∫†ÌéòÏù∏ Ïã§Ìñâ',
        description: 'Ìö®Í≥ºÏ†ÅÏù∏ ÎßàÏºÄÌåÖ Ï∫†ÌéòÏù∏ÏùÑ Ïã§ÌñâÌï©ÎãàÎã§',
        icon: 'üöÄ'
      },
      {
        title: 'ÏÑ±Í≥º Î∂ÑÏÑù',
        description: 'Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÎßàÏºÄÌåÖ ÏÑ±Í≥ºÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî',
        icon: 'üìà'
      }
    ]
  },
  curling: {
    title: 'Ïª¨ÎßÅ',
    description: 'Ïä§ÎßàÌä∏ Í≥µÏó∞Ïû• ÏòàÏïΩ ÌîåÎû´Ìèº',
    icon: Building2,
    color: '#FF7F00',
    features: [
      {
        icon: Calendar,
        title: 'Ïã§ÏãúÍ∞Ñ ÏòàÏïΩ',
        description: 'Ïã§ÏãúÍ∞Ñ Í≥µÏó∞Ïû• Í∞ÄÏö©ÏÑ± ÌôïÏù∏ Î∞è ÏòàÏïΩ',
        details: [
          'Ïã§ÏãúÍ∞Ñ Í≥µÏó∞Ïû• ÌòÑÌô© ÌôïÏù∏',
          'Í∞ÑÌé∏Ìïú ÏòàÏïΩ ÌîÑÎ°úÏÑ∏Ïä§',
          'ÏûêÎèô ÏùºÏ†ï Ï°∞Ïú® ÏãúÏä§ÌÖú',
          'ÏòàÏïΩ Î≥ÄÍ≤Ω/Ï∑®ÏÜå Í¥ÄÎ¶¨'
        ]
      },
      {
        icon: BarChart,
        title: 'Í∞ÄÍ≤© ÏµúÏ†ÅÌôî',
        description: 'ÏãúÏ¶åÎ≥Ñ ÏµúÏ†Å ÎåÄÍ¥ÄÎ£å Ï∂îÏ≤ú',
        details: [
          'ÏãúÏ¶åÎ≥Ñ ÏàòÏöî Î∂ÑÏÑù',
          'Í≤ΩÏüÅ Í≥µÏó∞Ïû• Í∞ÄÍ≤© ÎπÑÍµê',
          'ÏàòÏùµ ÏµúÏ†ÅÌôî Ï∂îÏ≤ú',
          'Ìï†Ïù∏ Ï†ïÏ±Ö ÏÑ§Í≥Ñ'
        ]
      },
      {
        icon: Users,
        title: 'Í≥µÏó∞Ïû• Îß§Ïπ≠',
        description: 'Í≥µÏó∞ Í∑úÎ™®ÏôÄ ÏÑ±Í≤©Ïóê ÎßûÎäî ÏµúÏ†ÅÏùò Í≥µÏó∞Ïû• Ï∂îÏ≤ú',
        details: [
          'Í≥µÏó∞ ÌäπÏÑ± Í∏∞Î∞ò Îß§Ïπ≠',
          'Í∏∞Ïà† ÏöîÍµ¨ÏÇ¨Ìï≠ Î∂ÑÏÑù',
          'Í¥ÄÍ∞ù ÏàòÏö©Î†• ÏµúÏ†ÅÌôî',
          'Î∂ÄÎåÄÏãúÏÑ§ Îß§Ïπ≠'
        ]
      }
    ],
    steps: [
      {
        title: 'Í≥µÏó∞ ÏöîÍµ¨ÏÇ¨Ìï≠ ÏûÖÎ†•',
        description: 'ÌïÑÏöîÌïú Í≥µÏó∞Ïû• Ï°∞Í±¥ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
        icon: 'üìã'
      },
      {
        title: 'Í≥µÏó∞Ïû• Ï∂îÏ≤ú',
        description: 'AIÍ∞Ä ÏµúÏ†ÅÏùò Í≥µÏó∞Ïû•ÏùÑ Ï∂îÏ≤úÌï©ÎãàÎã§',
        icon: 'üèõÔ∏è'
      },
      {
        title: 'ÏùºÏ†ï ÌôïÏù∏',
        description: 'Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í∞ÄÏö© ÏùºÏ†ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî',
        icon: 'üìÖ'
      },
      {
        title: 'Í≤¨Ï†Å Î∞è Í≥ÑÏïΩ',
        description: 'Ìà¨Î™ÖÌïú Í≤¨Ï†ÅÍ≥º Í∞ÑÌé∏Ìïú Í≥ÑÏïΩÏùÑ ÏßÑÌñâÌï©ÎãàÎã§',
        icon: 'üìÑ'
      },
      {
        title: 'Í≥µÏó∞Ïû• Ïù¥Ïö©',
        description: 'ÏõêÌôúÌïú Í≥µÏó∞Ïû• Ïù¥Ïö©ÏùÑ ÏßÄÏõêÌï©ÎãàÎã§',
        icon: 'üé≠'
      }
    ]
  }
};

interface FeatureModalProps {
  feature: {
    title: string;
    description: string;
    details: string[];
  };
  onClose: () => void;
}

const FeatureModal: React.FC<FeatureModalProps> = ({ feature, onClose }) => {
  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl w-full max-w-2xl">
        <div className="p-6 flex justify-between items-center border-b">
          <h3 className="text-2xl font-bold">{feature.title}</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X className="w-6 h-6" />
          </button>
        </div>
        <div className="p-6">
          <p className="text-gray-600 mb-6">{feature.description}</p>
          <div className="space-y-4">
            {feature.details.map((detail, index) => (
              <div key={index} className="flex items-center gap-3">
                <CheckCircle2 className="w-5 h-5 text-[#FF7F00]" />
                <span>{detail}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const ServiceDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const service = services[id as keyof typeof services];
  const [selectedFeature, setSelectedFeature] = useState<number | null>(null);
  const [visibleStep, setVisibleStep] = useState(0);
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  useEffect(() => {
    if (inView) {
      const interval = setInterval(() => {
        setVisibleStep((prev) => 
          prev < (service?.steps.length ?? 0) - 1 ? prev + 1 : prev
        );
      }, 800);
      return () => clearInterval(interval);
    }
  }, [inView, service?.steps.length]);

  if (!service) {
    return <div>Service not found</div>;
  }

  const ServiceIcon = service.icon;

  const handleContactClick = () => {
    window.open('https://docs.google.com/forms/d/e/1FAIpQLSdiBEucT8Bin9FCDjV0CarS33ptykw7_ouLiQg_zQVDq4k_og/viewform?usp=sf_link', '_blank');
  };

  return (
    <div className="pt-20 overflow-x-hidden">
      <section 
        className="relative bg-gradient-to-b from-[#FF7F00]/10 to-white py-24 px-4 sm:px-6 lg:px-8 overflow-hidden"
      >
        <div className="max-w-7xl mx-auto relative z-10">
          <button
            onClick={() => navigate('/')}
            className="flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-8 transition-colors group"
          >
            <ArrowLeft className="w-5 h-5 group-hover:-translate-x-1 transition-transform" />
            <span>Î©îÏù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</span>
          </button>

          <div className="flex items-center gap-4 mb-8 animate-[fadeIn_1s_ease-out]">
            <div className="w-16 h-16 bg-[#FF7F00]/10 rounded-xl flex items-center justify-center transform hover:scale-110 transition-transform">
              <ServiceIcon className="w-8 h-8 text-[#FF7F00]" />
            </div>
            <div>
              <h1 className="text-4xl font-bold mb-2">{service.title}</h1>
              <p className="text-xl text-gray-600">{service.description}</p>
            </div>
          </div>
        </div>
      </section>

      <section className="py-24 px-4 sm:px-6 lg:px-8 bg-white">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-3xl font-bold mb-12">Ï£ºÏöî Í∏∞Îä•</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {service.features.map((feature, index) => {
              const FeatureIcon = feature.icon;
              return (
                <button
                  key={index}
                  onClick={() => setSelectedFeature(index)}
                  className="text-left bg-white p-6 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 cursor-pointer"
                >
                  <div className="w-12 h-12 bg-[#FF7F00]/10 rounded-lg flex items-center justify-center mb-4">
                    <FeatureIcon className="w-6 h-6 text-[#FF7F00]" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
                  <p className="text-gray-600">{feature.description}</p>
                </button>
              );
            })}
          </div>
        </div>
      </section>

      <section ref={ref} className="bg-gray-50 py-24 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-3xl font-bold mb-12">Ïù¥Ïö© ÌîÑÎ°úÏÑ∏Ïä§</h2>
          <div className="relative">
            <div className="absolute top-1/2 left-0 w-full h-0.5 bg-gray-200 -translate-y-1/2 hidden md:block" />
            <div className="grid grid-cols-1 md:grid-cols-5 gap-8">
              {service.steps.map((step, index) => (
                <div
                  key={index}
                  className={`relative transform transition-all duration-500 ${
                    index <= visibleStep
                      ? 'opacity-100 translate-y-0'
                      : 'opacity-0 translate-y-8'
                  }`}
                >
                  <div className="text-4xl mb-4 text-center">{step.icon}</div>
                  <div className={`bg-white p-6 rounded-lg shadow-lg transform transition-all duration-500 ${
                    index <= visibleStep ? 'translate-y-0' : 'translate-y-4'
                  }`}>
                    <h3 className="font-semibold mb-2 text-center">{step.title}</h3>
                    <p className="text-sm text-gray-600 text-center">{step.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      <section className="py-24 px-4 sm:px-6 lg:px-8 bg-gradient-to-b from-white to-gray-50">
        <div className="max-w-3xl mx-auto text-center">
          <h2 className="text-3xl font-bold mb-8">ÏßÄÍ∏à Î∞îÎ°ú ÏãúÏûëÌïòÏÑ∏Ïöî</h2>
          <button
            onClick={handleContactClick}
            className="inline-flex items-center gap-2 bg-[#FF7F00] text-white px-8 py-4 rounded-full hover:bg-[#FF9933] transition-all duration-300 transform hover:scale-105"
          >
            Î¨¥Î£åÎ°ú ÏãúÏûëÌïòÍ∏∞
            <ArrowRight className="w-5 h-5" />
          </button>
        </div>
      </section>

      {selectedFeature !== null && (
        <FeatureModal
          feature={service.features[selectedFeature]}
          onClose={() => setSelectedFeature(null)}
        />
      )}
    </div>
  );
};

export default ServiceDetail;